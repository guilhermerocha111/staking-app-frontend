/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MasterChef, MasterChefInterface } from "../MasterChef";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vesting",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenPerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenPerBlockMaxCap",
        type: "uint256",
      },
    ],
    name: "TokenPerBlockMaxCapUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenPerBlock",
        type: "uint256",
      },
    ],
    name: "TokenPerBlockUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "approveForVesting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakeFor",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentClaimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentUnstaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getStakes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUntill",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedBlock",
            type: "uint256",
          },
        ],
        internalType: "struct MasterChef.UserInfo[]",
        name: "stakes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "pendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolInfo",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastRewardBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "puase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "pull",
    outputs: [
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "totalClaimed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalUnstaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastVest",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsPerWallet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenPerBlock",
        type: "uint256",
      },
    ],
    name: "setTokenPerBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "setTokenPerBlockMaxCap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPerBlockMaxCap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpuase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeUntill",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakedBlock",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakeIndex",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e0604052683635c9adc5dea000006009553480156200001e57600080fd5b5060405162001ea038038062001ea0833981016040819052620000419162000277565b6200004c3362000227565b600180556002805460ff191690556001600160601b0319606085811b8216608090815294811b821660c05292831b1660a0526003556040805192830181526001600160a01b03909316808352600060208481018290524395850186905293909201829052600480546001600160a01b031916909117905560058190556006929092556007829055670494654067e100007fb500998a2231b583e908a1b39c18018d38ac385329d6bf58b8879659d91d392e55670de0b6b3a76400007f6d7a92e696f0688f26e4b1ea6039fe4448d8a822e67ac794a76d0e65df6db55255671bc16d674ec800007fe384e135df32402addc580925d5c80f941f594d938ef40d56b2582791012bd8555673782dace9d9000007fabe5891665e4d029d7fd083d87f0540794d9e0da09311e678b66d088e68c164855600e905262278d007f195ad0e161a4326cd85229a1fcca74cf96f3c99e31b4ec5457e0d9c344e00031556276a7007f280ae0cff1002d66bf67a1695081e14a3a1ea44cfefc7d0dde04fe9364207c6d5562ed4e007f2d02ca4b9b1a9951b3b198bdeb2029bba72eb8ad3deee59dc0b023e42c8c45255561016890526301da9c007f9e9a2575117b926e4407a45919e9215a0801eac8a21395e21d557ca6c188dc0855620002e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156200028d578384fd5b84516200029a81620002d0565b6020860151909450620002ad81620002d0565b6040860151909350620002c081620002d0565b6060959095015193969295505050565b6001600160a01b0381168114620002e657600080fd5b50565b60805160601c60a05160601c60c05160601c611b546200034c600039600081816101ce015281816109780152610bb60152600081816102cc015281816107f5015281816108d8015281816109460152610b86015260006104580152611b546000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637ba6f458116100f9578063bdfc7f0c11610097578063fc0c546a11610071578063fc0c546a14610453578063fc56a8131461047a578063fccc887f146104df578063fd5e6dd11461050b57600080fd5b8063bdfc7f0c1461041a578063e2bbb1581461042d578063f2fde38b1461044057600080fd5b80639ba2bde8116100d35780639ba2bde8146103a9578063a1397f76146103b1578063a7bbb52d146103d1578063b5d5b5fa146103da57600080fd5b80637ba6f458146103705780638a9758fe146103905780638da5cb5b1461039857600080fd5b8063443de10c116101665780635a2f3d09116101405780635a2f3d09146103015780635c975abb1461034a5780635d5eaa4f14610360578063715018a61461036857600080fd5b8063443de10c1461029b57806344c63eec146102c757806352d11238146102ee57600080fd5b806331d7a262116101a257806331d7a26214610259578063379607f51461026c578063411330bd1461027f5780634198709a1461029257600080fd5b80630f8a267b146101c95780631f715f9b1461020d5780632e1a7d4d14610244575b600080fd5b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61023661021b3660046118a3565b6001600160a01b03166000908152600b602052604090205490565b604051908152602001610204565b610257610252366004611906565b61051e565b005b6102366102673660046118a3565b610687565b61025761027a366004611906565b6107d9565b61025761028d366004611906565b61085c565b61023660035481565b6102366102a93660046118a3565b6001600160a01b03166000908152600b602052604090206002015490565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6102366102fc3660046118a3565b6108cb565b600454600554600654600754610320936001600160a01b031692919084565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610204565b60025460ff166040519015158152602001610204565b6102576109fa565b610257610a2e565b61038361037e3660046118a3565b610a62565b6040516102049190611973565b610257610b13565b6000546001600160a01b03166101f0565b610257610b45565b6102366103bf3660046118a3565b600c6020526000908152604090205481565b61023660095481565b6103ed6103e83660046118bd565b610c35565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610204565b610257610428366004611906565b610c89565b61025761043b366004611936565b610cee565b61025761044e3660046118a3565b6110be565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6104b76104883660046118a3565b600b60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610204565b6102366104ed3660046118a3565b6001600160a01b03166000908152600b602052604090206001015490565b6101f0610519366004611906565b611156565b600260015414156105765760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600061058682611180565b90504281606001511061059857600080fd5b6105a0611244565b8051336000908152600b6020526040812060020180549091906105c4908490611aaa565b90915550508051336000908152600b6020526040812060010180549091906105ed908490611a53565b9091555050602080820151336000908152600b9092526040822060030180549192909161061b908490611aaa565b9091555050805160045461063c916001600160a01b03909116903390611304565b805160405133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689161067791868252602082015260400190565b60405180910390a2505060018055565b6001600160a01b0381166000908152600a6020908152604080832080548251818502810185019093528083528493849084015b8282101561072857838290600052602060002090600602016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050815260200190600101906106ba565b50505050905060005b81518110156107d2574282828151811061075b57634e487b7160e01b600052603260045260246000fd5b602002602001015160600151106107c0576006546107b39061077d9043611aaa565b6107ad8484815181106107a057634e487b7160e01b600052603260045260246000fd5b602002602001015161136c565b906113ad565b6107bd9084611a53565b92505b806107ca81611aed565b915050610731565b5050919050565b60405163017043b560e51b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e0876a090604401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146108865760405162461bcd60e51b815260040161056d90611a1e565b806108c65760405162461bcd60e51b815260206004820152601060248201526f4d5553545f4e4f545f42455f5a45524f60801b604482015260640161056d565b600355565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461090257600080fd5b61090a611244565b506001600160a01b038181166000908152600c6020908152604080832054600b9092529182902043600491820155915163095ea7b360e01b81527f000000000000000000000000000000000000000000000000000000000000000084169281019290925260248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f491906118e6565b50919050565b6000546001600160a01b03163314610a245760405162461bcd60e51b815260040161056d90611a1e565b610a2c6113c0565b565b6000546001600160a01b03163314610a585760405162461bcd60e51b815260040161056d90611a1e565b610a2c6000611458565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610b0857838290600052602060002090600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505081526020019060010190610a9a565b505050509050919050565b6000546001600160a01b03163314610b3d5760405162461bcd60e51b815260040161056d90611a1e565b610a2c6114a8565b6000546001600160a01b03163314610b6f5760405162461bcd60e51b815260040161056d90611a1e565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3291906118e6565b50565b600a6020528160005260406000208181548110610c5157600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493965091945092909186565b6000546001600160a01b03163314610cb35760405162461bcd60e51b815260040161056d90611a1e565b60098190556040518181527f077314f91a82ed8438b0dfdfe50d3fa564f5f11abde2aeb87c2960836e8470639060200160405180910390a150565b60026001541415610d415760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161056d565b6002600155610d5260025460ff1690565b15610d925760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161056d565b8080601e1480610da2575080605a145b80610dad57508060b4145b80610db9575080610168145b610dfe5760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b604482015260640161056d565b60048054604051636eb1769f60e11b8152339281019290925230602483015284916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b158015610e4c57600080fd5b505afa158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e84919061191e565b1015610e8f57600080fd5b610e9833611522565b610ea0611244565b610ed96040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b83815260808101839052426040808301919091524360a08301526000848152600d6020522054610f1d90670de0b6b3a764000090610f1790876113ad565b906115de565b6020808301919091526000848152600e9091526040902054610f409042906115ea565b60608201908152336000908152600a6020908152604080832080546001818101835591855283852087516006909202019081559286015190830155840151600282015591516003830155608083015160048084019190915560a08401516005938401558254909287929091610fb6908490611a53565b90915550506020820151600382018054600090610fd4908490611a53565b90915550508151336000908152600b602052604081206002018054909190610ffd908490611a53565b9091555050602080830151336000908152600b9092526040822060030180549192909161102b908490611a53565b9091555050336000908152600b6020908152604080832043600490910155600a90915281205461105d90600190611aaa565b8254909150611077906001600160a01b03163330896115f6565b604080518281526020810188905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a250506001805550505050565b6000546001600160a01b031633146110e85760405162461bcd60e51b815260040161056d90611a1e565b6001600160a01b03811661114d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161056d565b610c3281611458565b6008818154811061116657600080fd5b6000918252602090912001546001600160a01b0316905081565b6111b96040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b336000908152600a602052604090208054839081106111e857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250509050919050565b60065460049043116112535750565b60005b6008548110156112fa5761129e6008828154811061128457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316610687565b600c6000600884815481106112c357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902055806112f281611aed565b915050611256565b5043600290910155565b6040516001600160a01b03831660248201526044810182905261136790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611634565b505050565b60075460808201516000908152600d6020526040812054600354845192936113a793670de0b6b3a764000093610f179384926107ad916113ad565b92915050565b60006113b98284611a8b565b9392505050565b60025460ff16156114065760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161056d565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861143b3390565b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff166114f15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161056d565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361143b565b60005b60085481101561158b57816001600160a01b03166008828154811061155a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611579575050565b8061158381611aed565b915050611525565b50600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b60006113b98284611a6b565b60006113b98284611a53565b6040516001600160a01b038085166024830152831660448201526064810182905261162e9085906323b872dd60e01b90608401611330565b50505050565b6000611689826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117069092919063ffffffff16565b80519091501561136757808060200190518101906116a791906118e6565b6113675760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161056d565b6060611715848460008561171d565b949350505050565b60608247101561177e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161056d565b6001600160a01b0385163b6117d55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161056d565b600080866001600160a01b031685876040516117f19190611957565b60006040518083038185875af1925050503d806000811461182e576040519150601f19603f3d011682016040523d82523d6000602084013e611833565b606091505b509150915061184382828661184e565b979650505050505050565b6060831561185d5750816113b9565b82511561186d5782518084602001fd5b8160405162461bcd60e51b815260040161056d91906119eb565b80356001600160a01b038116811461189e57600080fd5b919050565b6000602082840312156118b4578081fd5b6113b982611887565b600080604083850312156118cf578081fd5b6118d883611887565b946020939093013593505050565b6000602082840312156118f7578081fd5b815180151581146113b9578182fd5b600060208284031215611917578081fd5b5035919050565b60006020828403121561192f578081fd5b5051919050565b60008060408385031215611948578182fd5b50508035926020909101359150565b60008251611969818460208701611ac1565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156119de5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101611990565b5091979650505050505050565b6020815260008251806020840152611a0a816040850160208701611ac1565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611a6657611a66611b08565b500190565b600082611a8657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611aa557611aa5611b08565b500290565b600082821015611abc57611abc611b08565b500390565b60005b83811015611adc578181015183820152602001611ac4565b8381111561162e5750506000910152565b6000600019821415611b0157611b01611b08565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220abaeb6780a0d5c108467a29c34a08999d025addb307c5df78c4b90786cc726c864736f6c63430008040033";

export class MasterChef__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MasterChef> {
    return super.deploy(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      overrides || {}
    ) as Promise<MasterChef>;
  }
  getDeployTransaction(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      overrides || {}
    );
  }
  attach(address: string): MasterChef {
    return super.attach(address) as MasterChef;
  }
  connect(signer: Signer): MasterChef__factory {
    return super.connect(signer) as MasterChef__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MasterChefInterface {
    return new utils.Interface(_abi) as MasterChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterChef {
    return new Contract(address, _abi, signerOrProvider) as MasterChef;
  }
}
