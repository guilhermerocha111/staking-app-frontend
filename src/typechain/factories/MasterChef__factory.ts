/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MasterChef, MasterChefInterface } from "../MasterChef";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vesting",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenPerBlock",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_supply",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakeFor",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentClaimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentUnstaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_to",
        type: "uint256",
      },
    ],
    name: "getMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getStakes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUntill",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardDebt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "withdrawed",
            type: "bool",
          },
        ],
        internalType: "struct MasterChef.DepositInfo[]",
        name: "stakes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolInfo",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lastRewardBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "accSmcwPerShare",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "pull",
    outputs: [
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "totalClaimed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalUnstaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastVest",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsPerWallet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supplyContract",
    outputs: [
      {
        internalType: "contract Supply",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updatePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "updateTokenPerBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakeIndex",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001cbc38038062001cbc833981016040819052620000349162000298565b6200003f3362000248565b600180556002805460ff19169055600580546001600160a01b03199081166001600160a01b03978816908117909255600780548216968816969096179095556006805486169487169490941790935560088054851691909516179093556009929092554360118190556040805160a08101825284815260208082018490526000928201839052606082018390526080909101829052600a8054909416909417909255600b55600c819055600d819055600e819055670494654067e100007f6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f55670de0b6b3a76400007f3219ed562b3fd9188a49dd9a57bec5aecadcb61ea33f29053262442c210d825f55671bc16d674ec800007f3803eb3ad32319afb811b1ed93c96ec4bdf98bf0a9358801efe0713a54aa4f1955673782dace9d9000007f9c8aae2e9cebb36b5ec5fd4a2c38e858dd32d8cc6534255991490fb7908a309f55600490915262278d007f9041ee6632bd2142b9cc58f348e0761559f8d964fe48ac6d87dc2b689213e3bb556276a7007fdf768ab10bd9bf6991efbce6ca12a3eab909711d259e530cf7c7661f662cdb235562ed4e007fc863fa5af6bb48872cec7870bb32c7c91f7aeb27df0fe984f7cf436bab7e8c525561016890526301da9c007fa06e5b3859f5fcf7f927f2ba6ee70f534a7190e4d17af4e8b5003a42807d13dc5562000324565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600060a08688031215620002b0578081fd5b8551620002bd816200030b565b6020870151909550620002d0816200030b565b6040870151909450620002e3816200030b565b606087015160808801519194509250620002fd816200030b565b809150509295509295909350565b6001600160a01b03811681146200032157600080fd5b50565b61198880620003346000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635c975abb116100f9578063ae0e597a11610097578063f2fde38b11610071578063f2fde38b14610433578063fc0c546a14610446578063fc56a81314610459578063fccc887f146104be57600080fd5b8063ae0e597a14610405578063e2bbb15814610418578063e3161ddd1461042b57600080fd5b80638456cb59116100d35780638456cb59146103b95780638da5cb5b146103c15780638dbb1e3a146103d2578063a1397f76146103e557600080fd5b80635c975abb1461037b578063715018a6146103915780637ba6f4581461039957600080fd5b80634198709a1161016657806348cd4cb11161014057806348cd4cb1146102f757806350cb82d31461030057806352d11238146103135780635a2f3d091461032657600080fd5b80634198709a146102af578063443de10c146102b857806344c63eec146102e457600080fd5b80632e1a7d4d116101a25780632e1a7d4d1461026c57806331d7a26214610281578063379607f5146102945780633f4ba83a146102a757600080fd5b80630f8a267b146101c95780631959a002146101f95780631f715f9b14610235575b600080fd5b6007546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102206102073660046116dc565b600f602052600090815260409020805460019091015482565b604080519283526020830191909152016101f0565b61025e6102433660046116dc565b6001600160a01b031660009081526010602052604090205490565b6040519081526020016101f0565b61027f61027a366004611723565b6104ea565b005b61025e61028f3660046116dc565b61065f565b61027f6102a2366004611723565b610840565b61027f6108a7565b61025e60095481565b61025e6102c63660046116dc565b6001600160a01b031660009081526010602052604090206002015490565b6006546101dc906001600160a01b031681565b61025e60115481565b6008546101dc906001600160a01b031681565b61025e6103213660046116dc565b6108db565b600a54600b54600c54600d54600e54610349946001600160a01b03169392919085565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0016101f0565b60025460ff1660405190151581526020016101f0565b61027f6109cb565b6103ac6103a73660046116dc565b6109ff565b6040516101f09190611790565b61027f610ac7565b6000546001600160a01b03166101dc565b61025e6103e0366004611753565b610af9565b61025e6103f33660046116dc565b60126020526000908152604090205481565b61027f610413366004611723565b610b0c565b61027f610426366004611753565b610b3b565b61027f610fbf565b61027f6104413660046116dc565b6110c9565b6005546101dc906001600160a01b031681565b6104966104673660046116dc565b601060205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101f0565b61025e6104cc3660046116dc565b6001600160a01b031660009081526010602052604090206001015490565b600260015414156105425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600061055282611164565b60e08101519091501561059c5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481dda5d1a191c985dd95960721b6044820152606401610539565b428160600151106105ac57600080fd5b6105b4610fbf565b805133600090815260106020526040812060020180549091906105d89084906118de565b909155505080513360009081526010602052604081206001018054909190610601908490611887565b909155505060208082015133600090815260109092526040822060030180549192909161062f9084906118de565b90915550508051600a54610650916001600160a01b03909116903390611255565b600160e0909101819052805550565b6001600160a01b038181166000908152600f6020526040808220600c5460075460085493516370a0823160e01b815293861660048501529394600a949293919286929116906370a082319060240160206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061173b565b9050600084600101544311801561071357508115155b15610836576000610728866001015443610af9565b90506000805b6002870154811015610832576009546107489084906112bd565b6107529083611887565b915061078461077d896004015461077764e8d4a51000866112bd90919063ffffffff16565b906112c9565b87906112d5565b95506108148760020182815481106107ac57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016006015461080e64e8d4a510006107778a8c60020187815481106107ee57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600101546112bd90919063ffffffff16565b906112e1565b61081e9085611887565b93508061082a81611921565b91505061072e565b5050505b9695505050505050565b60065460405163017043b560e51b8152336004820152602481018390526001600160a01b0390911690632e0876a090604401600060405180830381600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146108d15760405162461bcd60e51b815260040161053990611852565b6108d96112ed565b565b6006546000906001600160a01b031633146108f557600080fd5b6108fd610fbf565b506001600160a01b0381811660009081526012602090815260408083205460109092529182902043600491820155600754600654935163095ea7b360e01b815293851691840191909152602483018290529092169063095ea7b390604401602060405180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611703565b506001600160a01b0390911660009081526012602052604081205590565b6000546001600160a01b031633146109f55760405162461bcd60e51b815260040161053990611852565b6108d96000611380565b6001600160a01b0381166000908152600f60209081526040808320600201805482518185028101850190935280835260609492939192909184015b82821015610abc57600084815260209081902060408051610100810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff16151560e08301529083529092019101610a3a565b505050509050919050565b6000546001600160a01b03163314610af15760405162461bcd60e51b815260040161053990611852565b6108d96113d0565b6000610b0582846112e1565b9392505050565b6000546001600160a01b03163314610b365760405162461bcd60e51b815260040161053990611852565b600955565b60026001541415610b8e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610539565b6002600155610b9f60025460ff1690565b15610bdf5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610539565b8080601e1480610bef575080605a145b80610bfa57508060b4145b80610c06575080610168145b610c4b5760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b6044820152606401610539565b60008311610c8a5760405162461bcd60e51b815260206004820152600c60248201526b15dc9bdb99c8185b5bdd5b9d60a21b6044820152606401610539565b600a54604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b919061173b565b1015610d1657600080fd5b336000908152600f60205260409020600a610d2f610fbf565b6000604051806101000160405280878152602001610d75670de0b6b3a76400006107778a600360008c8152602001908152602001600020546112bd90919063ffffffff16565b8152602001428152602001610da66004600089815260200190815260200160002054426112d590919063ffffffff16565b8152602001868152602001438152602001610dd764e8d4a5100061077786600201548b6112bd90919063ffffffff16565b81526000602091820181905233815260109091526040812060020180549293508892909190610e07908490611887565b9091555050600085815260036020526040902054610e3390670de0b6b3a76400009061077790896112bd565b3360009081526010602052604081206003018054909190610e55908490611887565b909155505033600090815260106020526040812043600490910155600383018054889290610e84908490611887565b9091555050600085815260036020526040902054610eb090670de0b6b3a76400009061077790896112bd565b826004016000828254610ec39190611887565b9091555050825486908490600090610edc908490611887565b9091555050600085815260036020526040902054610f0890670de0b6b3a76400009061077790896112bd565b836001016000828254610f1b9190611887565b90915550506002838101805460018082018355600092835260209283902085516008909302019182559184015191810191909155604083015191810191909155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e08201516007909101805460ff19169115159190911790558154610fb3906001600160a01b031633308961144b565b50506001805550505050565b600b54600a904311610fce5750565b6007546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611052919061173b565b905080611063575043600190910155565b600061106e3361065f565b33600090815260126020526040812080549293508392909190611092908490611887565b909155506110b990506110ae836107778464e8d4a510006112bd565b6002850154906112d5565b6002840155505043600190910155565b6000546001600160a01b031633146110f35760405162461bcd60e51b815260040161053990611852565b6001600160a01b0381166111585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610539565b61116181611380565b50565b6111ae604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b336000908152600f602052604090206002018054839081106111e057634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051610100810182526008909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e082015292915050565b6040516001600160a01b0383166024820152604481018290526112b890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611489565b505050565b6000610b0582846118bf565b6000610b05828461189f565b6000610b058284611887565b6000610b0582846118de565b60025460ff166113365760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610539565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff16156114165760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610539565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113633390565b6040516001600160a01b03808516602483015283166044820152606481018290526114839085906323b872dd60e01b90608401611281565b50505050565b60006114de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661155b9092919063ffffffff16565b8051909150156112b857808060200190518101906114fc9190611703565b6112b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610539565b606061156a8484600085611572565b949350505050565b6060824710156115d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610539565b6001600160a01b0385163b61162a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610539565b600080866001600160a01b031685876040516116469190611774565b60006040518083038185875af1925050503d8060008114611683576040519150601f19603f3d011682016040523d82523d6000602084013e611688565b606091505b50915091506116988282866116a3565b979650505050505050565b606083156116b2575081610b05565b8251156116c25782518084602001fd5b8160405162461bcd60e51b8152600401610539919061181f565b6000602082840312156116ed578081fd5b81356001600160a01b0381168114610b05578182fd5b600060208284031215611714578081fd5b81518015158114610b05578182fd5b600060208284031215611734578081fd5b5035919050565b60006020828403121561174c578081fd5b5051919050565b60008060408385031215611765578081fd5b50508035926020909101359150565b600082516117868184602087016118f5565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156118125781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e09081015115159085015261010090930192908501906001016117ad565b5091979650505050505050565b602081526000825180602084015261183e8160408501602087016118f5565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561189a5761189a61193c565b500190565b6000826118ba57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118d9576118d961193c565b500290565b6000828210156118f0576118f061193c565b500390565b60005b838110156119105781810151838201526020016118f8565b838111156114835750506000910152565b60006000198214156119355761193561193c565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122025ee25ee069070668049d43a5acc261eea86487d03e5ad848ccf71188e45081f64736f6c63430008040033";

export class MasterChef__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    _supply: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MasterChef> {
    return super.deploy(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      _supply,
      overrides || {}
    ) as Promise<MasterChef>;
  }
  getDeployTransaction(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    _supply: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      _supply,
      overrides || {}
    );
  }
  attach(address: string): MasterChef {
    return super.attach(address) as MasterChef;
  }
  connect(signer: Signer): MasterChef__factory {
    return super.connect(signer) as MasterChef__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MasterChefInterface {
    return new utils.Interface(_abi) as MasterChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterChef {
    return new Contract(address, _abi, signerOrProvider) as MasterChef;
  }
}
