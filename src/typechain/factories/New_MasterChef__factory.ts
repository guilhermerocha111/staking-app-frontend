/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NewMasterChef, NewMasterChefInterface } from "../NewMasterChef";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vesting",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenPerBlock",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_supply",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      { indexed: true, internalType: "uint256", name: "pid", type: "uint256" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_pid", type: "uint256" },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentClaimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCurrentUnstaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_to",
        type: "uint256",
      },
    ],
    name: "getMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getStakes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUntill",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedBlock",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "withdrawed",
            type: "bool",
          },
        ],
        internalType: "struct MasterChef.DepositInfo[]",
        name: "stakes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "harvestRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "poolInfo",
    outputs: [
      { internalType: "contract IERC20", name: "lpToken", type: "address" },
      { internalType: "uint256", name: "allocPoint", type: "uint256" },
      { internalType: "uint256", name: "lastRewardBlock", type: "uint256" },
      { internalType: "uint256", name: "accTokenPerShare", type: "uint256" },
      { internalType: "uint256", name: "balance", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "pull",
    outputs: [
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "totalClaimed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalUnstaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastVest",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardsPerWallet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supplyContract",
    outputs: [
      {
        internalType: "contract Supply",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "updateTokenPerBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "address", name: "", type: "address" },
    ],
    name: "userInfo",
    outputs: [
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "rewardDebt", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakeIndex",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c7238038062001c72833981016040819052620000349162000297565b6200003f3362000247565b600180556002805460ff19169055600580546001600160a01b03199081166001600160a01b03978816908117909255600780548216968816969096179095556006805486169487169490941790935560088054851691909516179093556009929092554360118190556040805160a08101825284815260006020808301829052928201819052606082018190526080909101839052600a8054909416909417909255600b839055600c839055600d839055600e55670494654067e100007f6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f55670de0b6b3a76400007f3219ed562b3fd9188a49dd9a57bec5aecadcb61ea33f29053262442c210d825f55671bc16d674ec800007f3803eb3ad32319afb811b1ed93c96ec4bdf98bf0a9358801efe0713a54aa4f1955673782dace9d9000007f9c8aae2e9cebb36b5ec5fd4a2c38e858dd32d8cc6534255991490fb7908a309f556004905262278d007f9041ee6632bd2142b9cc58f348e0761559f8d964fe48ac6d87dc2b689213e3bb556276a7007fdf768ab10bd9bf6991efbce6ca12a3eab909711d259e530cf7c7661f662cdb235562ed4e007fc863fa5af6bb48872cec7870bb32c7c91f7aeb27df0fe984f7cf436bab7e8c525561016890526301da9c007fa06e5b3859f5fcf7f927f2ba6ee70f534a7190e4d17af4e8b5003a42807d13dc5562000323565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600060a08688031215620002af578081fd5b8551620002bc816200030a565b6020870151909550620002cf816200030a565b6040870151909450620002e2816200030a565b606087015160808801519194509250620002fc816200030a565b809150509295509295909350565b6001600160a01b03811681146200032057600080fd5b50565b61193f80620003336000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635a2f3d09116100f9578063a1397f7611610097578063f2fde38b11610071578063f2fde38b1461044c578063fc0c546a1461045f578063fc56a81314610472578063fccc887f146104d757600080fd5b8063a1397f7614610406578063ae0e597a14610426578063e2bbb1581461043957600080fd5b80637ba6f458116100d35780637ba6f458146103ba5780638456cb59146103da5780638da5cb5b146103e25780638dbb1e3a146103f357600080fd5b80635a2f3d09146103475780635c975abb1461039c578063715018a6146103b257600080fd5b80634198709a1161016657806348cd4cb11161014057806348cd4cb11461030557806350cb82d31461030e578063515ce5171461032157806352d112381461033457600080fd5b80634198709a146102bd578063443de10c146102c657806344c63eec146102f257600080fd5b80632e1a7d4d116101a25780632e1a7d4d1461027a57806331d7a2621461028f578063379607f5146102a25780633f4ba83a146102b557600080fd5b80630f8a267b146101c95780631959a002146101f95780631f715f9b14610243575b600080fd5b6007546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102286102073660046116b9565b600f6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101f0565b61026c6102513660046116b9565b6001600160a01b031660009081526010602052604090205490565b6040519081526020016101f0565b61028d610288366004611700565b610503565b005b61026c61029d3660046116b9565b610729565b61028d6102b0366004611700565b6107e8565b61028d61084f565b61026c60095481565b61026c6102d43660046116b9565b6001600160a01b031660009081526010602052604090206002015490565b6006546101dc906001600160a01b031681565b61026c60115481565b6008546101dc906001600160a01b031681565b61028d61032f3660046116b9565b610883565b61026c6103423660046116b9565b610963565b600a54600b54600c54600d54600e5461036a946001600160a01b03169392919085565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0016101f0565b60025460ff1660405190151581526020016101f0565b61028d610a54565b6103cd6103c83660046116b9565b610a88565b6040516101f0919061176d565b61028d610b45565b6000546001600160a01b03166101dc565b61026c610401366004611730565b610b77565b61026c6104143660046116b9565b60126020526000908152604090205481565b61028d610434366004611700565b610b8a565b61028d610447366004611730565b610bb9565b61028d61045a3660046116b9565b61103f565b6005546101dc906001600160a01b031681565b6104af6104803660046116b9565b601060205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101f0565b61026c6104e53660046116b9565b6001600160a01b031660009081526010602052604090206001015490565b6002600154141561055b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155600061056b826110da565b336000908152600f6020526040902060c0820151919250600a91156105c75760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481dda5d1a191c985dd95960721b6044820152606401610552565b428360600151106105d757600080fd5b6105e033610883565b825133600090815260106020526040812060020180549091906106049084906118b0565b90915550508251336000908152601060205260408120600101805490919061062d908490611859565b909155505060208084015133600090815260109092526040822060030180549192909161065b9084906118b0565b90915550508251815482906000906106749084906118b0565b909155505060208301516001820180546000906106929084906118b0565b909155505082516002830180546000906106ad9084906118b0565b909155505060208301516003830180546000906106cb9084906118b0565b909155505060018083015490820154670de0b6b3a7640000916106ed91611891565b6106f79190611871565b60028201558251600a54610718916001600160a01b039091169033906111b8565b5050600160c0909101819052805550565b6001600160a01b0381166000908152600f60205260408120600b54600e54600a9291904311156107aa57600083600401544361076591906118b0565b90506000600954826107779190611891565b6002860154909150610791670de0b6b3a764000083611891565b61079b9190611871565b6107a59084611859565b925050505b60008260020154670de0b6b3a76400008385600101546107ca9190611891565b6107d49190611871565b6107de91906118b0565b9695505050505050565b60065460405163017043b560e51b8152336004820152602481018390526001600160a01b0390911690632e0876a090604401600060405180830381600087803b15801561083457600080fd5b505af1158015610848573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146108795760405162461bcd60e51b815260040161055290611824565b610881611220565b565b61088b6112b3565b6001600160a01b0381166000908152600f602052604081206002810154600b546001830154600a949291670de0b6b3a7640000916108c99190611891565b6108d39190611871565b6108dd91906118b0565b90508061091957670de0b6b3a7640000836001015483600101546109019190611891565b61090b9190611871565b826002018190555050505050565b6001600160a01b03841660009081526012602052604081208054839290610941908490611859565b909155505060018084015490830154670de0b6b3a76400009161090191611891565b6006546000906001600160a01b0316331461097d57600080fd5b61098682610883565b506001600160a01b0381811660009081526012602090815260408083205460109092529182902043600491820155600754600654935163095ea7b360e01b815293851691840191909152602483018290529092169063095ea7b390604401602060405180830381600087803b1580156109fe57600080fd5b505af1158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3691906116e0565b506001600160a01b0390911660009081526012602052604081205590565b6000546001600160a01b03163314610a7e5760405162461bcd60e51b815260040161055290611824565b610881600061132d565b6001600160a01b0381166000908152600f60209081526040808320600301805482518185028101850190935280835260609492939192909184015b82821015610b3a5760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c08301529083529092019101610ac3565b505050509050919050565b6000546001600160a01b03163314610b6f5760405162461bcd60e51b815260040161055290611824565b61088161137d565b6000610b8382846113f8565b9392505050565b6000546001600160a01b03163314610bb45760405162461bcd60e51b815260040161055290611824565b600955565b60026001541415610c0c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610552565b6002600155610c1d60025460ff1690565b15610c5d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610552565b8080601e1480610c6d575080605a145b80610c7857508060b4145b80610c84575080610168145b610cc95760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b6044820152606401610552565b60008311610d085760405162461bcd60e51b815260206004820152600c60248201526b15dc9bdb99c8185b5bdd5b9d60a21b6044820152606401610552565b600a54604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611718565b1015610d9457600080fd5b336000818152600f6020526040902090600a90610db090610883565b60006040518060e00160405280878152602001610dfb670de0b6b3a7640000610df58a600360008c81526020019081526020016000205461140490919063ffffffff16565b90611410565b8152602001428152602001610e2c60046000898152602001908152602001600020544261141c90919063ffffffff16565b8152602001868152602001438152602001600015158152509050806000015160106000336001600160a01b03166001600160a01b031681526020019081526020016000206002016000828254610e829190611859565b9091555050602080820151336000908152601090925260408220600301805491929091610eb0908490611859565b909155505033600090815260106020526040812043600490910155600283018054889290610edf908490611859565b9091555050600085815260036020526040902054610f0b90670de0b6b3a764000090610df59089611404565b826003016000828254610f1e9190611859565b9091555050825486908490600090610f37908490611859565b9091555050600085815260036020526040902054610f6390670de0b6b3a764000090610df59089611404565b836001016000828254610f769190611859565b909155505060018083015490840154670de0b6b3a764000091610f9891611891565b610fa29190611871565b60028481019190915560038085018054600180820183556000928352602092839020865160079093020191825591850151918101919091556040840151928101929092556060830151908201556080820151600482015560a0820151600582015560c08201516006909101805460ff19169115159190911790558154611033906001600160a01b0316333089611428565b50506001805550505050565b6000546001600160a01b031633146110695760405162461bcd60e51b815260040161055290611824565b6001600160a01b0381166110ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610552565b6110d78161132d565b50565b61111c6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b336000908152600f6020526040902060030180548390811061114e57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546080820152600582015460a082015260069091015460ff16151560c082015292915050565b6040516001600160a01b03831660248201526044810182905261121b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611466565b505050565b60025460ff166112695760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610552565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600c54600a906112c65743600490910155565b60008160040154436112d891906118b0565b90506000600954826112ea9190611891565b6002840154909150611304670de0b6b3a764000083611891565b61130e9190611871565b836001015461131d9190611859565b6001840155505043600490910155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff16156113c35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610552565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112963390565b6000610b8382846118b0565b6000610b838284611891565b6000610b838284611871565b6000610b838284611859565b6040516001600160a01b03808516602483015283166044820152606481018290526114609085906323b872dd60e01b906084016111e4565b50505050565b60006114bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115389092919063ffffffff16565b80519091501561121b57808060200190518101906114d991906116e0565b61121b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610552565b6060611547848460008561154f565b949350505050565b6060824710156115b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610552565b6001600160a01b0385163b6116075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610552565b600080866001600160a01b031685876040516116239190611751565b60006040518083038185875af1925050503d8060008114611660576040519150601f19603f3d011682016040523d82523d6000602084013e611665565b606091505b5091509150611675828286611680565b979650505050505050565b6060831561168f575081610b83565b82511561169f5782518084602001fd5b8160405162461bcd60e51b815260040161055291906117f1565b6000602082840312156116ca578081fd5b81356001600160a01b0381168114610b83578182fd5b6000602082840312156116f1578081fd5b81518015158114610b83578182fd5b600060208284031215611711578081fd5b5035919050565b600060208284031215611729578081fd5b5051919050565b60008060408385031215611742578081fd5b50508035926020909101359150565b600082516117638184602087016118c7565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156117e45781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c09081015115159085015260e0909301929085019060010161178a565b5091979650505050505050565b60208152600082518060208401526118108160408501602087016118c7565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561186c5761186c6118f3565b500190565b60008261188c57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118ab576118ab6118f3565b500290565b6000828210156118c2576118c26118f3565b500390565b60005b838110156118e25781810151838201526020016118ca565b838111156114605750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122031bc0dae8846ce9135657d3041510770bda852dfb6fc2a10993d30e6352e528a64736f6c63430008040033";

export class New_MasterChef__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    _supply: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NewMasterChef> {
    return super.deploy(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      _supply,
      overrides || {}
    ) as Promise<NewMasterChef>;
  }
  getDeployTransaction(
    _stakingToken: string,
    _rewardingToken: string,
    _vesting: string,
    _tokenPerBlock: BigNumberish,
    _supply: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardingToken,
      _vesting,
      _tokenPerBlock,
      _supply,
      overrides || {}
    );
  }
  attach(address: string): NewMasterChef {
    return super.attach(address) as NewMasterChef;
  }
  connect(signer: Signer): New_MasterChef__factory {
    return super.connect(signer) as New_MasterChef__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NewMasterChefInterface {
    return new utils.Interface(_abi) as NewMasterChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NewMasterChef {
    return new Contract(address, _abi, signerOrProvider) as NewMasterChef;
  }
}
